clc
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Github\Two-link-Robotic-Arm\G1.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/03/06 19:54:29

%% Initialize variables.
filename = 'D:\Github\Two-link-Robotic-Arm\Zain.txt';
delimiter = ' ';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Allocate imported array to column variable names
x = cell2mat(raw(:, 2))/1000;
y = cell2mat(raw(:, 3))/1000;

% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;
%% Create your Robotic Arm
L(1) = Link([0      0      0.20       0      0      0]);
L(2) = Link([0      0      0.15       0      0      0]);
% % Build a serial robot object
R2 = SerialLink(L(1:2), 'name', 'TwoLink');
% 
% % Robot base coordinates (cartesian space)
% R2.base=transl(0,0,0);

% x_len = length(x);
po = 10;
hold on
view(-0.6,0.8);
xlim([-0.6,1]);
ylim([-0.6,1]); 
zlim([-0.1,0.2]); 

% Desired points in cartesian space (meters)
% % ##########Plotting ZAIN#############

%Point 1 to 2 
pp1 = transl(x(1,1),y(1,1),0);
pp2 = transl(x(2,1),y(2,1),0);
crt_sp1 = ctraj(pp1,pp2,po);
crt_ik1  = R2.ikine(crt_sp1,'mask',[1 1 0 0 0 0]);

%Point 2 to 3
pp3 = transl(x(3,1),y(3,1),0);
crt_sp2 = ctraj(pp2,pp3,po);
crt_ik2  = R2.ikine(crt_sp2,'mask',[1 1 0 0 0 0]);

%Point 3 to 4
pp4 = transl(x(4,1),y(4,1),0);
crt_sp3 = ctraj(pp3,pp4,po);
crt_ik3  = R2.ikine(crt_sp3,'mask',[1 1 0 0 0 0]);

% % Point 4 to 5
% pp5 = transl(x(5,1),y(5,1),0);
% crt_sp4 = ctraj(pp4,pp5,po);
% crt_ik4  = R2.ikine(crt_sp4,'mask',[1 1 0 0 0 0]);
% 
% % Point 5 to 6
% pp6 = transl(x(6,1),y(6,1),0);
% crt_sp5 = ctraj(pp5,pp6,po);
% crt_ik5  = R2.ikine(crt_sp5,'mask',[1 1 0 0 0 0]);
% 
% % Point 6 to 7
% pp7 = transl(x(7,1),y(7,1),0);
% crt_sp6 = ctraj(pp6,pp7,po);
% crt_ik6  = R2.ikine(crt_sp6,'mask',[1 1 0 0 0 0]);
% 
% % Point 7 to 8
% pp8 = transl(x(8,1),y(8,1),0);
% crt_sp7 = ctraj(pp7,pp8,po);
% crt_ik7  = R2.ikine(crt_sp7,'mask',[1 1 0 0 0 0]);
% 
% % Point 8 to 9
% pp9 = transl(x(9,1),y(9,1),0);
% crt_sp8 = ctraj(pp8,pp9,po);
% crt_ik8  = R2.ikine(crt_sp8,'mask',[1 1 0 0 0 0]);
% 
% % Point 9 to 10
% pp10 = transl(x(10,1),y(10,1),0);
% crt_sp9 = ctraj(pp9,pp10,po);
% crt_ik9  = R2.ikine(crt_sp9,'mask',[1 1 0 0 0 0]);
% 
% % Point 10 to 11
% pp11 = transl(x(11,1),y(11,1),0);
% crt_sp10 = ctraj(pp10,pp11,po);
% crt_ik10  = R2.ikine(crt_sp10,'mask',[1 1 0 0 0 0]);
% 
% % Point 11 to 12
% pp12 = transl(x(12,1),y(12,1),0);
% crt_sp11 = ctraj(pp11,pp12,po);
% crt_ik11  = R2.ikine(crt_sp11,'mask',[1 1 0 0 0 0]);
% 
% % Point 12 to 13
% pp13 = transl(x(13,1),y(13,1),0);
% crt_sp12 = ctraj(pp12,pp13,po);
% crt_ik12  = R2.ikine(crt_sp12,'mask',[1 1 0 0 0 0]);
% 
% % Point 13 to 14
% pp14 = transl(x(14,1),y(14,1),0);
% crt_sp13 = ctraj(pp13,pp14,po);
% crt_ik13  = R2.ikine(crt_sp13,'mask',[1 1 0 0 0 0]);

%Perform Simulation and plot all the points

for i=1:1:po
    fd1=R2.fkine(crt_ik1(i,:));
     j = transpose(fd1.t);
%     k(i,:)= j;
    plot2(j,'r.')    ;
     R2.plot(crt_ik1(i,:)) ;
end
for i=1:1:po
    fd2=R2.fkine(crt_ik2(i,:));
     j = transpose(fd2.t);
%     k(i,:)= j;
    plot2(j,'r.')    ;
     R2.plot(crt_ik2(i,:)) ;
end
for i=1:1:po
    fd3=R2.fkine(crt_ik3(i,:));
     j = transpose(fd3.t);
%     k(i,:)= j;
    plot2(j,'r.')    ;
     R2.plot(crt_ik3(i,:)) ;
end
% 
% for i=1:1:po
%     fd4=R2.fkine(crt_ik4(i,:));
%      j = transpose(fd4.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik4(i,:)) ;
% end
% 
% for i=1:1:po
%     fd5=R2.fkine(crt_ik5(i,:));
%      j = transpose(fd5.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik5(i,:)) ;
% end
% % 
% for i=1:1:po
%     fd6=R2.fkine(crt_ik6(i,:));
%      j = transpose(fd6.t);
% %     plot2(j,'r.');
%      R2.plot(crt_ik6(i,:));
% end
% % 
% for i=1:1:po
%     fd7=R2.fkine(crt_ik7(i,:));
%      j = transpose(fd7.t);
% %     k(i,:)= j;
%     plot2(j,'r.')    ;
%      R2.plot(crt_ik7(i,:)) ;
% end
% % 
% for i=1:1:po
%     fd8=R2.fkine(crt_ik8(i,:));
%      j = transpose(fd8.t);
% %     k(i,:)= j;
% %     plot2(j,'r.')    ;
%      R2.plot(crt_ik8(i,:)) ;
% end
% % 
% % 
% for i=1:1:po
%     fd9=R2.fkine(crt_ik9(i,:));
%      j = transpose(fd9.t);
% %     k(i,:)= j;
%     plot2(j,'r.')    ;
%      R2.plot(crt_ik9(i,:)) ;
% end
% 
% for i=1:1:po
%     fd10=R2.fkine(crt_ik10(i,:));
%      j = transpose(fd10.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik10(i,:)) ;
% end
% 
% for i=1:1:po
%     fd11=R2.fkine(crt_ik11(i,:));
%      j = transpose(fd11.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik11(i,:)) ;
% end
% for i=1:1:po
%     fd12=R2.fkine(crt_ik12(i,:));
%      j = transpose(fd12.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik12(i,:)) ;
% end
% 
% for i=1:1:po
%     fd13=R2.fkine(crt_ik13(i,:));
%      j = transpose(fd13.t);
% %     k(i,:)= j;
%     plot2(j,'r.');
%      R2.plot(crt_ik13(i,:)) ;
% end


